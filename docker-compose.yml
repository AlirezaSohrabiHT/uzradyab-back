services:
  web:
    build:
      context: .
    network_mode: host
    command: uvicorn managerPanel.asgi:application --host 0.0.0.0 --port 36201
    volumes:
      - .:/app
      - ./logs:/app/logs
    ports:
      - "36201:36201"
    environment:
      VITE_NOTIFICATION_URL: http://127.0.0.1:36201
      CELERY_BROKER_URL: redis://127.0.0.1:6379/0   # ðŸ‘ˆ point to your existing Redis
      CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://127.0.0.1:36201/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery:
    build:
      context: .
    command: celery -A managerPanel worker -l info
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      CELERY_BROKER_URL: redis://127.0.0.1:6379/0
      CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
    restart: unless-stopped
    network_mode: host   # ðŸ‘ˆ if you want direct host networking like web

  celery-beat:
    build:
      context: .
    command: celery -A managerPanel beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      CELERY_BROKER_URL: redis://127.0.0.1:6379/0
      CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
    restart: unless-stopped
    network_mode: host
