"""
Django settings for managerPanel project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import pymysql
pymysql.install_as_MySQLdb()
from pathlib import Path
from celery.schedules import crontab
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # How log records are formatted
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    # Handlers define where log messages are sent
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            # This handler rotates logs when they reach 5MB, keeping up to 5 old files.
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'commands.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    # Loggers are the entry point into the logging system
    'loggers': {
        # This logger is for your specific app
        'traccar_calls': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        # This is the root logger
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!lz1ztarurm_u8(^k5lol_fp^5_59ap^w03lh!z-k^)3k_(svs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ['*']

CELERY_BROKER_URL = "redis://redis:6379/0"  
CELERY_RESULT_BACKEND = "redis://redis:6379/0"
CELERY_TIMEZONE = "Asia/Tehran"   # or whatever your local timezone is
CELERY_ENABLE_UTC = False

CORS_ALLOWED_ORIGINS = [
    "http://uzradyab.ir",
    "https://app.uzradyab.ir",
    "http://app.uzradyab.ir",
    "http://localhost:3000",
    "http://localhost:5173",
    "http://localhost:3037",
    'https://admin.uzradyab.ir',
    'http://192.168.1.120',
    'https://sipaad.exirfirm.com'
]

TRACCAR_API_URL = "https://app.uzradyab.ir/api"


CSRF_TRUSTED_ORIGINS = [
    'https://app.uzradyab.ir',
    'https://pay.uzradyab.ir',  # Add if you have requests originating from here as well
    'http://localhost:3000',     # Add localhost for development
    "http://localhost:5173",  # For development on localhost
    "https://sipaad.exirfirm.com"
]

CSRF_COOKIE_SECURE = True  # Ensures CSRF cookies are only sent over HTTPS
CSRF_COOKIE_SAMESITE = 'None'  # Allows the CSRF cookie to be sent cross-site
SESSION_COOKIE_SECURE = True  # Ensures session cookies are only sent over HTTPS


# Application definition
TOKEN_EXPIRATION_TIME = None
INSTALLED_APPS = [
    'main',
    'rest_framework',
    'rest_framework.authtoken',
    'traccar_calls',
    "corsheaders",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'jalali_date',
    'otpmanager',
    'services',
    'uzradyabHandler',
    'django_celery_beat',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'managerPanel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'managerPanel.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'fa-ir'

#import locale
#locale.setlocale(locale.LC_ALL, "Persian_Iran.UTF-8")

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SANDBOX MODE

MERCHANT = "0a36c5ed-3774-4631-ada6-39b885d738a4"

SANDBOX = True

AUTH_USER_MODEL = 'accounts.User'


TRACCAR_API_USERNAME = "09156336261"
TRACCAR_API_PASSWORD = "MTkKppOTdOsj"
KAVENEGAR_API_KEY="415270574F5349545265306244503252575A44584C52614C69736C6C56437841"


# local DB
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'uzradyab',
        'USER': 'uzradmin',
        'PASSWORD': 'T_3gBf1YDqQN]1o8',
        'HOST': '45.139.10.10',
        'PORT': '3306',
    },
    'device_user_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'traccar1',
        'USER': 'admin_traccar',
        'PASSWORD': '3h4wfv7ue9re',
        'HOST': '45.139.10.10',
        'PORT': '5432',
    },
}

CELERY_BEAT_SCHEDULE = {
    "check-expired-devices-every-6h": {
        "task": "traccar_calls.tasks.run_check_expired_devices",
        "schedule": crontab(minute=0, hour=2),
    },
    "send-expiry-sms-daily": {
        "task": "traccar_calls.tasks.run_send_device_expiry_sms",
        "schedule": crontab(minute=0, hour=18),
    },
}


# CELERY_BEAT_SCHEDULE = {
#     "check-expired-devices-every-2min": {
#         "task": "traccar_calls.tasks.run_check_expired_devices",
#         "schedule": timedelta(minutes=2),
#     },
#     "send-expiry-sms-every-2min": {
#         "task": "traccar_calls.tasks.run_send_device_expiry_sms",
#         "schedule": timedelta(minutes=2),
#     },
# }